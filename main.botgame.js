// Подключаем библиотеку для работы с телеграм-ботом
const TelegramBot = require('node-telegram-bot-api');

// Создаем бота с токеном, который получили от BotFather
const bot = new TelegramBot('', {polling: true});

// Объявляем переменные для хранения состояния игр
let ticTacToe = {}; // Крестики-нолики
let guessWord = {}; // Угадай слово
let guessCity = {}; // Угадай город

// Объявляем константы для символов крестиков и ноликов
const X = '❌';
const O = '⭕️';

// Объявляем массив с возможными словами для игры угадай слово
const words = ['компьютер', 'телефон', 'кошка', 'собака', 'машина', 'книга', 'стол', 'стул', 'окно', 'дверь'];

// Объявляем массив с возможными городами и их описаниями для игры угадай город
const cities = [
  {name: 'Москва', description: 'Столица России, крупнейший город Европы, расположенный на реке Москве.'},
  {name: 'Париж', description: 'Столица Франции, один из самых посещаемых городов мира, известный своей архитектурой и культурой.'},
  {name: 'Лондон', description: 'Столица Великобритании, финансовый и культурный центр Европы, расположенный на реке Темзе.'},
  {name: 'Нью-Йорк', description: 'Крупнейший город США, мировой центр бизнеса, моды и развлечений, расположенный на берегу Атлантического океана.'},
  {name: 'Токио', description: 'Столица Японии, самый населенный город мира, известный своей современностью и технологиями.'},
  {name: 'Берлин', description: 'Столица Германии, город с богатой историей и культурой, расположенный на реках Шпрее и Хафель.'},
  {name: 'Рим', description: 'Столица Италии, древний город, который был центром Римской империи, известный своими памятниками и музеями.'},
  {name: 'Пекин', description: 'Столица Китая, политический и культурный центр страны, расположенный в северо-восточной части Китая.'},
  {name: 'Буэнос-Айрес', description: 'Столица Аргентины, самый крупный город Южной Америки, известный своей музыкой и танцами.'},
  {name: 'Каир', description: 'Столица Египта, самый большой город Африки, расположенный на берегу реки Нил.'}
];

// Функция для проверки победы в игре крестики-нолики
function checkWin(board, symbol) {
  // Проверяем горизонтали
  for (let i = 0; i < 3; i++) {
    if (board[i][0] === symbol && board[i][1] === symbol && board[i][2] === symbol) {
      return true;
    }
  }
  // Проверяем вертикали
  for (let i = 0; i < 3; i++) {
    if (board[0][i] === symbol && board[1][i] === symbol && board[2][i] === symbol) {
      return true;
    }
  }
  // Проверяем диагонали
  if (board[0][0] === symbol && board[1][1] === symbol && board[2][2] === symbol) {
    return true;
  }
  if (board[0][2] === symbol && board[1][1] === symbol && board[2][0] === symbol) {
    return true;
  }
  // Если ничего не нашли, возвращаем false
  return false;
}

// Функция для проверки ничьи в игре крестики-нолики
function checkDraw(board) {
  // Проверяем, есть ли свободные клетки на доске
  for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
      if (board[i][j] === ' ') {
        return false;
      }
    }
  }
  // Если все клетки заняты, возвращаем true
  return true;
}

// Функция для генерации случайного целого числа в заданном диапазоне
function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Функция для генерации случайного слова из массива words
function randomWord() {
  return words[randomInt(0, words.length - 1)];
}

// Функция для генерации случайного города и его описания из массива cities
function randomCity() {
  return cities[randomInt(0, cities.length - 1)];
}

// Функция для форматирования доски в игре крестики-нолики в виде строки
function formatBoard(board) {
  let result = '';
  for (let i = 0; i < 3; i++) {
    result += '|';
    for (let j = 0; j < 3; j++) {
      result += board[i][j] + '|';
    }
    result += '\n';
  }
  return result;
}

// Обрабатываем команду /start, которая запускает бота
bot.onText(/\/start/, (msg) => {
  // Получаем идентификатор чата, из которого пришло сообщение
  const chatId = msg.chat.id;

  // Отправляем приветственное сообщение с инструкцией по использованию бота
  bot.sendMessage(chatId, 'Привет! Я бот, который может играть с тобой в три игры: крестики-нолики, угадай слово и угадай город. Для начала игры выбери одну из них и напиши ее название. Для завершения игры напиши "стоп". Удачи!');
});

// Обрабатываем текстовые сообщения от пользователя
bot.on('message', (msg) => {
  
      // Получаем идентификатор чата, из которого пришло сообщение
  const chatId = msg.chat.id;

  // Получаем текст сообщения
  const text = msg.text;

  // Проверяем, в какой игре участвует пользователь
  if (ticTacToe[chatId]) {
    // Если пользователь играет в крестики-нолики, обрабатываем его ход
    handleTicTacToe(chatId, text);
  } else if (guessWord[chatId]) {
    // Если пользователь играет в угадай слово, обрабатываем его ответ
    handleGuessWord(chatId, text);
  } else if (guessCity[chatId]) {
    // Если пользователь играет в угадай город, обрабатываем его ответ
    handleGuessCity(chatId, text);
  } else {
    // Если пользователь не играет ни в одну из игр, проверяем, какую игру он хочет начать
    if (text === 'крестики-нолики') {
      // Если пользователь выбрал крестики-нолики, инициализируем игру
      startTicTacToe(chatId);
    } else if (text === 'угадай слово') {
      // Если пользователь выбрал угадай слово, инициализируем игру
      startGuessWord(chatId);
    } else if (text === 'угадай город') {
      // Если пользователь выбрал угадай город, инициализируем игру
      startGuessCity(chatId);
    } else if (text === 'стоп') {
      // Если пользователь написал стоп, завершаем разговор
      bot.sendMessage(chatId, 'Пока! Надеюсь, тебе понравилось играть со мной.');
    } else {
      // Если пользователь написал что-то другое, напоминаем ему о доступных играх
      bot.sendMessage(chatId, 'Я не понимаю твое сообщение. Пожалуйста, выбери одну из трех игр: крестики-нолики, угадай слово или угадай город. Или напиши "стоп", если хочешь закончить разговор.');
    }
  }
});

// Функция для начала игры в крестики-нолики
function startTicTacToe(chatId) {
  // Создаем пустую доску 3 на 3
  let board = [
    [' ', ' ', ' '],
    [' ', ' ', ' '],
    [' ', ' ', ' ']
  ];

  // Случайно выбираем символ для пользователя и бота
  let userSymbol = Math.random() < 0.5 ? X : O;
  let botSymbol = userSymbol === X ? O : X;

  // Сохраняем состояние игры в объекте ticTacToe
  ticTacToe[chatId] = {
    board: board,
    userSymbol: userSymbol,
    botSymbol: botSymbol,
    turn: userSymbol // Пусть первым ходит пользователь
  };

  // Отправляем сообщение с приветствием и инструкцией по игре
  bot.sendMessage(chatId, `Давай сыграем в крестики-нолики! Твой символ - ${userSymbol}, мой - ${botSymbol}. Ты ходишь первым. Для того, чтобы сделать ход, напиши координаты клетки в формате "строка столбец", например "1 1" для центральной клетки. Вот доска:\n${formatBoard(board)}`);
}

// Функция для обработки хода пользователя в игре крестики-нолики
function handleTicTacToe(chatId, text) {
  // Получаем состояние игры из объекта ticTacToe
  let {board, userSymbol, botSymbol, turn} = ticTacToe[chatId];

  // Проверяем, что ходит пользователь
  if (turn === userSymbol) {
    // Проверяем, что сообщение содержит два числа, разделенных пробелом
    let match = text.match(/^(\d) (\d)$/);
    if (match) {
      // Получаем координаты клетки из сообщения
      let row = parseInt(match[1]) - 1;
      let col = parseInt(match[2]) - 1;

      // Проверяем, что координаты в допустимом диапазоне
      if (row >= 0 && row < 3 && col >= 0 && col < 3) {
        // Проверяем, что клетка свободна
        if (board[row][col] === ' ') {
          // Заполняем клетку символом пользователя
          board[row][col] = userSymbol;

          // Проверяем, выиграл ли пользователь
          if (checkWin(board, userSymbol)) {
            // Отправляем сообщение с поздравлением и доской
            bot.sendMessage(chatId, `Ты выиграл! Поздравляю! Вот доска:\n${formatBoard(board)}`);

            // Удаляем состояние игры из объекта ticTacToe
            delete ticTacToe[chatId];

            // Завершаем функцию
            return;
          }

          // Проверяем, наступила ли ничья
          if (checkDraw(board)) {
            // Отправляем сообщение с ничьей и доской
            bot.sendMessage(chatId, `Ничья! Хорошая игра! Вот доска:\n${formatBoard(board)}`);

            // Удаляем состояние игры из объекта ticTacToe
            delete ticTacToe[chatId];

            // Завершаем функцию
            return;
          }

          // Меняем очередь хода на бота
          turn = botSymbol;

          // Сохраняем обновленное состояние игры в объекте ticTacToe
          ticTacToe[chatId] = {board, userSymbol, botSymbol, turn};

          // Отправляем сообщение с доской и приглашением к ходу бота
          bot.sendMessage(chatId, `Хороший ход! Вот доска:\n${formatBoard(board)}\nТеперь мой ход.`);

          // Вызываем функцию для обработки хода бота
          handleTicTacToeBot(chatId);
        } else {
          // Если клетка занята, отправляем сообщение с ошибкой
          bot.sendMessage(chatId, `Эта клетка уже занята. Пожалуйста, выбери другую.`);
        }
      } else {
        // Если координаты недопустимы, отправляем сообщение с ошибкой
        bot.sendMessage(chatId, `Неверные координаты. Пожалуйста, введи два числа от 1 до 3, разделенных пробелом.`);
      }
    } else {
      // Если сообщение не содержит двух чисел, отправляем сообщение с ошибкой
      bot.sendMessage(chatId, `Неверный формат сообщения. Пожалуйста, введи два числа от 1 до 3, разделенных пробелом.`);
    }
  } else {
    // Если ходит бот, отправляем сообщение с напоминанием
    bot.sendMessage(chatId, `Сейчас мой ход. Подожди немного.`);
  }
}

// Функция для обработки хода бота в игре крестики-нолики
function handleTicTacToeBot(chatId) {
  // Получаем состояние игры из объекта ticTacToe
  let {board, userSymbol, botSymbol, turn} = ticTacToe[chatId];

  // Проверяем, что ходит бот
  if (turn === botSymbol) {
    // Ищем лучший ход для бота с помощью простого алгоритма

    // Сначала проверяем, есть ли выигрышный ход для бота
    for (let i = 0; i < 3; i++) {
      for (let       j = 0; j < 3; j++) {
        // Если клетка свободна, пробуем поставить туда символ бота
        if (board[i][j] === ' ') {
          board[i][j] = botSymbol;
          // Проверяем, выиграл ли бот
          if (checkWin(board, botSymbol)) {
            // Если да, отправляем сообщение с победой и доской
            bot.sendMessage(chatId, `Я выиграл! Ура! Вот доска:\n${formatBoard(board)}`);

            // Удаляем состояние игры из объекта ticTacToe
            delete ticTacToe[chatId];

            // Завершаем функцию
            return;
          } else {
            // Если нет, возвращаем клетку в исходное состояние
            board[i][j] = ' ';
          }
        }
      }
    }

    // Затем проверяем, есть ли проигрышный ход для пользователя, то есть ход, который приведет к его победе
    for (let i = 0; i < 3; i++) {
      for (let j = 0; j < 3; j++) {
        // Если клетка свободна, пробуем поставить туда символ пользователя
        if (board[i][j] === ' ') {
          board[i][j] = userSymbol;
          // Проверяем, выиграл ли пользователь
          if (checkWin(board, userSymbol)) {
            // Если да, значит это проигрышный ход для бота, поэтому ставим туда свой символ, чтобы предотвратить победу пользователя
            board[i][j] = botSymbol;

            // Меняем очередь хода на пользователя
            turn = userSymbol;

            // Сохраняем обновленное состояние игры в объекте ticTacToe
            ticTacToe[chatId] = {board, userSymbol, botSymbol, turn};

            // Отправляем сообщение с доской и приглашением к ходу пользователя
            bot.sendMessage(chatId, `Я блокирую твой выигрышный ход! Вот доска:\n${formatBoard(board)}\nТвой ход.`);

            // Завершаем функцию
            return;
          } else {
            // Если нет, возвращаем клетку в исходное состояние
            board[i][j] = ' ';
          }
        }
      }
    }

    // Если нет ни выигрышного, ни проигрышного хода, выбираем случайную свободную клетку
    while (true) {
      // Генерируем случайные координаты
      let row = randomInt(0, 2);
      let col = randomInt(0, 2);

      // Проверяем, что клетка свободна
      if (board[row][col] === ' ') {
        // Заполняем клетку символом бота
        board[row][col] = botSymbol;

        // Проверяем, наступила ли ничья
        if (checkDraw(board)) {
          // Отправляем сообщение с ничьей и доской
          bot.sendMessage(chatId, `Ничья! Хорошая игра! Вот доска:\n${formatBoard(board)}`);

          // Удаляем состояние игры из объекта ticTacToe
          delete ticTacToe[chatId];

          // Завершаем функцию
          return;
        }

        // Меняем очередь хода на пользователя
        turn = userSymbol;

        // Сохраняем обновленное состояние игры в объекте ticTacToe
        ticTacToe[chatId] = {board, userSymbol, botSymbol, turn};

        // Отправляем сообщение с доской и приглашением к ходу пользователя
        bot.sendMessage(chatId, `Я выбираю клетку ${row + 1} ${col + 1}. Вот доска:\n${formatBoard(board)}\nТвой ход.`);

        // Завершаем функцию
        return;
      }
    }
  } else {
    // Если ходит пользователь, отправляем сообщение с напоминанием
    bot.sendMessage(chatId, `Сейчас твой ход. Пожалуйста, введи координаты клетки.`);
  }
}

// Функция для начала игры в угадай слово
function startGuessWord(chatId) {
  // Генерируем случайное слово из массива words
  let word = randomWord();

  // Создаем массив с буквами слова, заменяя их на подчеркивания
  let letters = word.split('').map(letter => '_');

  // Сохраняем состояние игры в объекте guessWord
  guessWord[chatId] = {
    word: word,
    letters: letters,
    tries: 10 // Количество попыток угадать букву
  };

  // Отправляем сообщение с приветствием и инструкцией по игре
  bot.sendMessage(chatId, `Давай сыграем в угадай слово! Я загадал слово из ${word.length} букв. Ты можешь попытаться угадать его по одной букве за раз. У тебя есть ${tries} попыток. Для того, чтобы угадать букву, напиши ее в сообщении. Для того, чтобы угадать слово целиком, напиши его в сообщении. Вот слово:\n${letters.join(' ')}`);
}

// Функция для обработки ответа пользователя в игре угадай слово
function handleGuessWord(chatId, text) {
  // Получаем состояние игры из объекта guessWord
  let {word, letters, tries} = guessWord[chatId];

  // Проверяем, что сообщение содержит одну букву или слово целиком
  let match = text.match(/^([а-яА-Я])$|^([а-яА-Я]+)$/);
  if (match) {
    // Если сообщение содержит одну букву
    if (match[1]) {
      // Получаем букву из сообщения
      let letter = match[1].toLowerCase();

      // Проверяем, есть ли такая буква в слове
      if (word.includes(letter)) {
        // Если есть, заменяем подчеркивания на эту букву в массиве letters
        for (let i = 0; i < word.length; i++) {
          if (word[i] === letter) {
            letters[i] = letter;
          }
        }

        // Проверяем, угадал ли пользователь слово целиком
        if (letters.join('') === word) {
          // Если да, отправляем сообщение с поздравлением и словом
          bot.sendMessage(chatId, `Ты угадал слово! Поздравляю! Это было слово "${word}".`);

          // Удаляем состояние игры из объекта guessWord
          delete guessWord[chatId];

          // Завершаем функцию
          return;
        } else {
          // Если нет, отправляем сообщение с подсказкой и словом
          bot.sendMessage(chatId, `Ты угадал букву "${letter}". Вот слово:\n${letters.join(' ')}`);
        }
      } else {
        // Если нет, уменьшаем количество попыток на единицу
        tries--;

        // Проверяем, остались ли попытки
        if (tries > 0) {
          // Если да, отправляем сообщение с ошибкой и количеством попыток
          bot.sendMessage(chatId, `Такой буквы нет в слове. У тебя осталось ${tries} попыток.`);
        } else {
          // Если нет, отправляем сообщение с проигрышем и словом
          bot.sendMessage(chatId, `Ты проиграл! Закончились попытки. Это было слово "${word}".`);

          // Удаляем состояние игры из объекта guessWord
          delete guessWord[chatId];

                    // Завершаем функцию
                    return;
                }
              }
            }
        
            // Если сообщение содержит слово целиком
            if (match[2]) {
              // Получаем слово из сообщения
              let guess = match[2].toLowerCase();
        
              // Проверяем, совпадает ли слово с загаданным
              if (guess === word) {
                // Если да, отправляем сообщение с поздравлением и словом
                bot.sendMessage(chatId, `Ты угадал слово! Поздравляю! Это было слово "${word}".`);
        
                // Удаляем состояние игры из объекта guessWord
                delete guessWord[chatId];
        
                // Завершаем функцию
                return;
              } else {
                // Если нет, уменьшаем количество попыток на единицу
                tries--;
        
                // Проверяем, остались ли попытки
                if (tries > 0) {
                  // Если да, отправляем сообщение с ошибкой и количеством попыток
                  bot.sendMessage(chatId, `Ты не угадал слово. У тебя осталось ${tries} попыток.`);
                } else {
                  // Если нет, отправляем сообщение с проигрышем и словом
                  bot.sendMessage(chatId, `Ты проиграл! Закончились попытки. Это было слово "${word}".`);
        
                  // Удаляем состояние игры из объекта guessWord
                  delete guessWord[chatId];
        
                  // Завершаем функцию
                  return;
                }
              }
            }
          } else {
            // Если сообщение не содержит ни одной буквы, ни слова целиком, отправляем сообщение с ошибкой
            bot.sendMessage(chatId, `Неверный формат сообщения. Пожалуйста, введи одну букву или слово целиком.`);
          }
        }
        
        // Функция для начала игры в угадай город
        function startGuessCity(chatId) {
          // Генерируем случайный город и его описание из массива cities
          let city = randomCity();
        
          // Сохраняем состояние игры в объекте guessCity
          guessCity[chatId] = {
            city: city,
            tries: 3 // Количество попыток угадать город
          };
        
          // Отправляем сообщение с приветствием и инструкцией по игре
          bot.sendMessage(chatId, `Давай сыграем в угадай город! Я загадал один из десяти городов. Ты можешь попытаться угадать его по его описанию. У тебя есть ${tries} попытки. Для того, чтобы угадать город, напиши его название в сообщении. Вот описание:\n${city.description}`);
        }
        
        // Функция для обработки ответа пользователя в игре угадай город
        function handleGuessCity(chatId, text) {
          // Получаем состояние игры из объекта guessCity
          let {city, tries} = guessCity[chatId];
        
          // Проверяем, что сообщение содержит название города
          let match = text.match(/^([а-яА-Я]+)$/);
          if (match) {
            // Получаем название города из сообщения
            let guess = match[1].toLowerCase();
        
            // Проверяем, совпадает ли название города с загаданным
            if (guess === city.name.toLowerCase()) {
              // Если да, отправляем сообщение с поздравлением и городом
              bot.sendMessage(chatId, `Ты угадал город! Поздравляю! Это был город "${city.name}".`);
        
              // Удаляем состояние игры из объекта guessCity
              delete guessCity[chatId];
        
              // Завершаем функцию
              return;
            } else {
              // Если нет, уменьшаем количество попыток на единицу
              tries--;
        
              // Проверяем, остались ли попытки
              if (tries > 0) {
                // Если да, отправляем сообщение с ошибкой и количеством попыток
                bot.sendMessage(chatId, `Ты не угадал город. У тебя осталось ${tries} попыток.`);
              } else {
                // Если нет, отправляем сообщение с проигрышем и городом
                bot.sendMessage(chatId, `Ты проиграл! Закончились попытки. Это был город "${city.name}".`);
        
                // Удаляем состояние игры из объекта guessCity
                delete guessCity[chatId];
        
                // Завершаем функцию
                return;
              }
            }
          } else {
            // Если сообщение не содержит название города, отправляем сообщение с ошибкой
            bot.sendMessage(chatId, `Неверный формат сообщения. Пожалуйста, введи название города.`);
          }
        }
        
        // Завершаем код
        
